import { Graphics } from "./graphics";
import { Memory } from "./memory";
import { ProgramCounter } from "./programCounter";
import { Stack } from "./stack";
import { Timer } from "./timer";
import { Registers } from "./registers";
import { Chip8Key } from "./keyboard";
export declare type Chip8Params = {
    memory: Memory;
    stack: Stack;
    pc: ProgramCounter;
    graphics: Graphics;
    delayTimer: Timer;
    soundTimer: Timer;
    vregs: Registers;
    keyregs: Registers;
};
export declare class Chip8 {
    private _stack;
    private _memory;
    private _pc;
    private _graphics;
    private _delayTimer;
    private _soundTimer;
    private _vreg;
    private _keyregs;
    private _awaitKeyReg;
    private _ireg;
    constructor({ memory, stack, pc, graphics, delayTimer, soundTimer, vregs, keyregs, }: Chip8Params);
    get graphics(): Graphics;
    runCycle(): void;
    loadRom(romFile: File): Promise<void>;
    setKeyPress(key: Chip8Key, pressed: boolean): void;
    private call;
    private clearDisplay;
    private returnInstruction;
    private goto;
    private functionCall;
    private skipIfEqualsConst;
    private skipIfNequalConst;
    private skipIfEqualsReg;
    private assignConst;
    private addConst;
    private assignReg;
    private bitwiseOr;
    private bitwiseAnd;
    private bitwiseXor;
    private addReg;
    private subReg;
    private shiftRight;
    private subRegOpposite;
    private shiftLeft;
    private skipIfNequalReg;
    private setIreg;
    private jump;
    private setRand;
    private drawSprite;
    private skipIfKeypress;
    private skipIfNotKeypress;
    private getDelayTimer;
    private awaitGetKeyPress;
    private setDelayTimer;
    private setSoundTimer;
    private addRegToI;
    private setIToSprite;
    private setBCD;
    private regDump;
    private regLoad;
}
